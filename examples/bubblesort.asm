; Bubble sort using RAM (addresses 100..131) - 32 elements
; Purpose: fill RAM[100..131] with pseudo-random bytes and sort them
; Registers:
;   R0 - base address (start = 100)
;   R1 - index / loop counter for initialization
;   R2 - PRNG state (seed)
;   R3..R8 - temporary registers used in loops and swaps
;   R9 - PRNG multiplier (kept aside to avoid clobber in MUL)
;
; The code below is split into two phases:
; 1) init_loop: generate and store 32 pseudo-random bytes at RAM[100..131]
; 2) outer/inner loops: perform a simple bubble sort over those 32 bytes

    ; initialize pointers and PRNG
    ldi r0, 100    ; base address
    ldi r1, 0      ; index = 0
    ldi r2, 123    ; PRNG seed
    ldi r9, 75     ; PRNG multiplier (kept in r9 so mul doesn't clobber it)

init_loop:
    ; PRNG step: r2 := lowbyte(r2 * 75), then tweak
    mul r2, r9     ; r2 = low byte of (r2 * 75)
    inc r2         ; small increment to avoid repeating patterns
    ; store generated byte into memory at base + index
    st r0, r2      ; RAM[base] = r2
    inc r0         ; advance base pointer
    inc r1         ; increment index
    ldi r7, 32
    cp r1, r7
    brne init_loop

; Bubble sort for 32 elements (perform passes until i == 31)
    ldi r2, 0      ; i = 0 (outer loop counter)
outer_loop:
    ldi r3, 0      ; j = 0 (inner loop counter)
inner_loop:
    ; compute address of element A = base + j
    ldi r4, 100
    add r4, r3
    ld r5, r4      ; r5 = A
    ; compute address of element B = base + j + 1
    ldi r6, 100
    add r6, r3
    ldi r7, 1
    add r6, r7
    ld r8, r6      ; r8 = B
    ; compare A and B (we'll swap if A > B)
    cp r8, r5      ; sets carry if r8 < r5 (unsigned)
    brcs no_swap   ; branch if carry set => r8 < r5 => A > B? (keep original order)
    ; swap A and B: store B into A's address, A into B's address
    st r4, r8
    st r6, r5
no_swap:
    inc r3
    ldi r7, 31
    cp r3, r7
    breq end_inner
    jmp inner_loop
end_inner:
    inc r2
    ldi r7, 31
    cp r2, r7
    breq done
    jmp outer_loop

done:
    jmp done
